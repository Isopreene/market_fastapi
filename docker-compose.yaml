services:
  backend:
    container_name: back
    build: .
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
    restart: always

  db:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_db:/data/postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  db_test:
    container_name: postgres_test
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER_TEST}
      POSTGRES_PASSWORD: ${POSTGRES_PASS_TEST}
      POSTGRES_DB: ${POSTGRES_DB_TEST}
      PGDATA: /data/postgres
    expose:
      - "5433"
    ports:
      - "${POSTGRES_PORT_TEST}:5433"
    volumes:
      - postgres_test_db:/data/postgres
    command: -p 5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d 
      ${POSTGRES_DB_TEST}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  broker:
    container_name: rabbitmq
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
    restart: on-failure

volumes:
  postgres_db:
  postgres_test_db:
